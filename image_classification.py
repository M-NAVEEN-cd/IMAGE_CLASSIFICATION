# -*- coding: utf-8 -*-
"""Image_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CjAMgkPZo5rttz32U_PcMjkqJOe8LMVa

***

# DATA PREPROCESSING



1 - RESIZE

2 - FLATTEN
"""

import pandas as pd
import matplotlib.pyplot as plt
import os
import numpy as np
from skimage.io import imread
from skimage.transform import resize

target = []
images = []
flat_data = []

Data_dir = '/content/drive/MyDrive/Colab Notebooks/Python_ML/IMAGES'
Categories = ['Cat','Dog']

for category in Categories:
  class_num = Categories.index(category)
  path = os.path.join(Data_dir,category)
  for img in os.listdir(path):
    img_array = imread(os.path.join(path,img))
    #print(img_array.shape)
    #plt.imshow(img_array)


    img_resize = resize(img_array,(150,150,3))
    flat_data.append(img_resize.flatten())
    images.append(img_resize)
    target.append(class_num)

flat_data = np.array(flat_data)
target = np.array(target)
images = np.array(images)
#from google.colab import drive
#drive.mount('/content/drive')

unique,count = np.unique(target,return_counts=True)
plt.bar(Categories,count)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(flat_data,target,test_size=0.3,random_state=109)

from sklearn.model_selection import GridSearchCV
from sklearn import svm
param_grid = [
    {'C':[1,10,100,1000],'kernel':['linear']},
    {'C':[1,10,100,1000],'gamma':[0.001,0.0001],'kernel':['rbf']},


]
svc = svm.SVC(probability=True)
clf = GridSearchCV(svc,param_grid)
clf.fit(x_train,y_train)

y_pred =clf.predict(x_test)
y_pred

from sklearn.metrics import accuracy_score,confusion_matrix

accuracy_score(y_pred,y_test)

confusion_matrix(y_pred,y_test)

import pickle
pickle.dump(clf,open('img_model.p','wb'))

model = pickle.load(open('img_model.p','rb'))

flat_data = []
url = input("ENTER THE URL OF THE IMAGE : ")
img = imread(url)
img_resized = resize(img,(150,150,3))
flat_data.append(img_resized.flatten())
flat_data=np.array(flat_data)
print(img.shape)
plt.imshow(img_resized)
y_out = model.predict(flat_data)
y_out =Categories[y_out[0]]
print(f' PREDICTION BY THE MODEL : {y_out}')